#!/bin/bash

msg_icon=bunsen-face
msg_time_default=20000
msg_time=$msg_time_default
# name of fortune file(s) to use
cookie=cbbl
debug=0

#~ It is said that average reading speed is ~250 words per minute for adults.
#~ That means 4.166667 words per second.
#~ I think it's fair to assume that the text should linger quite a bit longer,
#~ about twice as long. make that 2 words per second, that's a delay of 500ms
#~ per word:
word_delay=500
char_delay=30
delay=2000

HELP="  bl-fortune is a script to display custom fortunes.

Usage:  bl-fortune [OPTIONS]

Options:
        -i <icon>, --icon=<icon>    use different icon
                                    (default is $msg_icon)
        -w <time>, --word-delay=<time> set delay per word
                                    (default is ${word_delay}ms)
                                    (overrides -t)
        -c <time>, --char-delay=<time> set delay per character
                                    (default is ${char_delay}ms)
                                    (overrides -t)
        -d <time>, --delay=<time> set initial delay
                                    (default is ${delay}ms)
                                    (overrides -t)

        The options -w, -c and -d are cumulative, they add up to a final 
        message display time.

        -t <time>, --expiry-time=<time> set fixed message expiry time
                                    (default is ${msg_time}ms)
                                    (overrides -d, -w, -c)
        -C <name>, --cookie='<name>[ name]'  set fortune cookie list(s)
                                    (default is $cookie)
                                    (this can contain multiple fortunes and
                                    options to fortune. Example:
                                    \"-ae cbbl fortunes\")
        -D                          debug - enable some terminal messages
        -h, --help  show this message

Description:
        This is a wrapper round notify-send
        - the icon and time options are the same.
        Normally run without options,
        the default behaviour is to choose a fortune
        from the 'cbbl' collection, which is gathered
        from CrunchBang and BunsenLabs forum posts.
"

error_exit() {
    echo "$0 error: $1" >&2
    exit 1
}
# need to escape a few chars that make notify-send puke (because it defaults to pango markup)
escapes() {
    retval="${1//-/\\-}"
    retval="${retval//&/\&amp;}"
    retval="${retval//</\&lt;}"
    retval="${retval//>/\&gt;}"
    retval="${retval//\"/\&quot;}"
}

debugging() {
    [[ "$debug" == 1 ]] && echo "$@"
}

while [[ -n $1 ]]
do
    case $1 in
    --help|-h)
        echo "$HELP"
        exit 0
        ;;
    -i)
        msg_icon="$2"
        shift 2
        ;;
    --icon=*)
        msg_icon="${1#--icon=}"
        shift
        ;;
    -t)
        msg_time="$2"
        delay=0
        shift 2
        ;;
    --expire-time=*)
        msg_time="${1#--expire-time=}"
        delay=0
        shift
        ;;
    -d)
        delay="$2"
        msg_time=0
        shift 2
        ;;
    --delay=*)
        delay="${1#--delay=}"
        msg_time=0
        shift
        ;;
    -w)
        word_delay="$2"
        msg_time=0
        shift 2
        ;;
    --word-delay=*)
        delay="${1#--word-delay=}"
        msg_time=0
        shift
        ;;
    -c)
        char_delay="$2"
        msg_time=0
        shift 2
        ;;
    --char-delay=*)
        char_delay="${1#--char-delay=}"
        msg_time=0
        shift
        ;;
    -D)
        debug=1
        shift 1
        ;;
    -C)
        cookie="$2"
        shift 2
        ;;
    --cookie=*)
        cookie="${1#--cookie=}"
        shift
        ;;
    *)
        error_exit "$1: no such option"
        ;;
    esac
done

text="$(fortune $cookie)"

#~ if (( delay > 0 )); then
    #~ words="$(wc -w <<<"$text")"
    #~ if (( words > 0 )); then
        #~ msg_time="$(( words * delay ))"
    #~ else
        #~ msg_time=$msg_time_default
    #~ fi
#~ fi

# Improved algorithm, adding
# 1. a fixed delay
# 2. word_delay
# 3. char_delay
if (( delay > 0 )) && (( word_delay > 0 )) && (( char_delay > 0 )); then
    words="$(wc -w <<<"$text")"
    chars="$(wc -m <<<"$text")"
    if (( words > 0 )) && (( chars > 0 )); then
        msg_time="$(( fixed_delay + (words * word_delay) + (chars * char_delay)))"
    else
        msg_time=$msg_time_default
    fi
fi

debugging "Timeout:  ${msg_time}ms"

header=( $text )
if (( "${#header[0]}" < 4 )) && (( "${#header[1]}" < 16 )); then
    header="${header[0]} ${header[1]}"
else
    header="${header[0]}"
fi

text="${text#$header}"
text="${text#$'\n'}"
text="${text# }"

escapes "$header"
header="$retval"
debugging "Header:   $header"

escapes "$text"
text="$retval"
debugging "Text:     $text"

notify-send --urgency=low --icon="$msg_icon" --expire-time="$msg_time" "$header" "$text"

exit
